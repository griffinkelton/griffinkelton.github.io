"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decorateStory = void 0;
var store_1 = require("@storybook/store");
var ComputesTemplateFromComponent_1 = require("./angular-beta/ComputesTemplateFromComponent");
function decorateStory(mainStoryFn, decorators) {
    var returnDecorators = __spreadArrays([cleanArgsDecorator], decorators).reduce(function (previousStoryFn, decorator) {
        return function (context) {
            var decoratedStory = decorator(function (update) {
                return previousStoryFn(__assign(__assign({}, context), store_1.sanitizeStoryContextUpdate(update)));
            }, context);
            return decoratedStory;
        };
    }, function (context) { return prepareMain(mainStoryFn(context), context); });
    return returnDecorators;
}
exports.default = decorateStory;
exports.decorateStory = decorateStory;
var prepareMain = function (story, context) {
    var _a;
    var template = story.template;
    var component = (_a = story.component) !== null && _a !== void 0 ? _a : context.component;
    var userDefinedTemplate = !hasNoTemplate(template);
    if (!userDefinedTemplate && component) {
        template = ComputesTemplateFromComponent_1.computesTemplateFromComponent(component, story.props, '');
    }
    return __assign(__assign({}, story), (template ? { template: template, userDefinedTemplate: userDefinedTemplate } : {}));
};
function hasNoTemplate(template) {
    return template === null || template === undefined;
}
var cleanArgsDecorator = function (storyFn, context) {
    if (!context.argTypes || !context.args) {
        return storyFn();
    }
    var argsToClean = context.args;
    context.args = Object.entries(argsToClean).reduce(function (obj, _a) {
        var _b;
        var key = _a[0], arg = _a[1];
        var argType = context.argTypes[key];
        // Only keeps args with a control or an action in argTypes
        if (argType.action || argType.control) {
            return __assign(__assign({}, obj), (_b = {}, _b[key] = arg, _b));
        }
        return obj;
    }, {});
    return storyFn();
};
