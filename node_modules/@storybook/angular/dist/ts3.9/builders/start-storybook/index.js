"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var architect_1 = require("@angular-devkit/architect");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var find_up_1 = require("find-up");
// eslint-disable-next-line import/no-extraneous-dependencies
var standalone_1 = __importDefault(require("@storybook/angular/standalone"));
var run_compodoc_1 = require("../utils/run-compodoc");
var build_standalone_errors_handler_1 = require("../utils/build-standalone-errors-handler");
exports.default = architect_1.createBuilder(commandBuilder);
function commandBuilder(options, context) {
    return rxjs_1.from(setup(options, context)).pipe(operators_1.switchMap(function (_a) {
        var tsConfig = _a.tsConfig;
        var runCompodoc$ = options.compodoc
            ? run_compodoc_1.runCompodoc({ compodocArgs: options.compodocArgs, tsconfig: tsConfig }, context).pipe(operators_1.mapTo({ tsConfig: tsConfig }))
            : rxjs_1.of({});
        return runCompodoc$.pipe(operators_1.mapTo({ tsConfig: tsConfig }));
    }), operators_1.map(function (_a) {
        var tsConfig = _a.tsConfig;
        var browserTarget = options.browserTarget, stylePreprocessorOptions = options.stylePreprocessorOptions, styles = options.styles, ci = options.ci, configDir = options.configDir, docs = options.docs, host = options.host, https = options.https, port = options.port, quiet = options.quiet, smokeTest = options.smokeTest, sslCa = options.sslCa, sslCert = options.sslCert, sslKey = options.sslKey;
        var standaloneOptions = {
            ci: ci,
            configDir: configDir,
            docs: docs,
            host: host,
            https: https,
            port: port,
            quiet: quiet,
            smokeTest: smokeTest,
            sslCa: sslCa,
            sslCert: sslCert,
            sslKey: sslKey,
            angularBrowserTarget: browserTarget,
            angularBuilderContext: context,
            angularBuilderOptions: __assign(__assign({}, (stylePreprocessorOptions ? { stylePreprocessorOptions: stylePreprocessorOptions } : {})), (styles ? { styles: styles } : {})),
            tsConfig: tsConfig,
        };
        return standaloneOptions;
    }), operators_1.switchMap(function (standaloneOptions) { return runInstance(standaloneOptions); }), operators_1.map(function () {
        return { success: true };
    }));
}
function setup(options, context) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var browserOptions, browserTarget, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (!options.browserTarget) return [3 /*break*/, 4];
                    browserTarget = architect_1.targetFromTargetString(options.browserTarget);
                    _d = (_c = context).validateOptions;
                    return [4 /*yield*/, context.getTargetOptions(browserTarget)];
                case 1:
                    _e = [_f.sent()];
                    return [4 /*yield*/, context.getBuilderNameForTarget(browserTarget)];
                case 2: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent()]))];
                case 3:
                    browserOptions = _f.sent();
                    _f.label = 4;
                case 4: return [2 /*return*/, {
                        tsConfig: (_b = (_a = options.tsConfig) !== null && _a !== void 0 ? _a : find_up_1.sync('tsconfig.json', { cwd: options.configDir })) !== null && _b !== void 0 ? _b : browserOptions.tsConfig,
                    }];
            }
        });
    });
}
function runInstance(options) {
    return new rxjs_1.Observable(function (observer) {
        // This Observable intentionally never complete, leaving the process running ;)
        standalone_1.default(options).then(function () { return observer.next(); }, function (error) { return observer.error(build_standalone_errors_handler_1.buildStandaloneErrorHandler(error)); });
    });
}
